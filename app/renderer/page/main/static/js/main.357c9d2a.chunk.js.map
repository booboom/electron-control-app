{"version":3,"sources":["../external \"electron\"","peer-puppet.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","getScreenStream","a","desktopCapturer","getSources","types","sources","Promise","resolve","reject","navigator","webkitGetUserMedia","audio","video","mandatory","chromeMediaSource","chromeMediaSourceId","id","maxWidth","window","screen","width","maxHeight","height","stream","err","console","error","pc","RTCPeerConnection","ondatachannel","e","log","channel","onmessage","JSON","parse","data","type","ipcRenderer","send","onicecandidate","stringify","candidate","on","addIceCandidate","candidates","push","remoteDescription","i","length","RTCIceCandidate","createAnswer","offer","screenStream","addStream","setRemoteDescription","setLocalDescription","localDescription","answer","sdp","Menu","remote","MenuItem","App","useState","remoteCode","setRemoteCode","lcoalCode","setLocalCode","controlText","setControlText","useEffect","login","handleControlState","removeListener","invoke","code","name","text","className","onContextMenu","preventDefault","menu","append","label","role","popup","handleContextMenu","value","onChange","target","onClick","startControl","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.357c9d2a.chunk.js","sourcesContent":["module.exports = require(\"electron\");","import { desktopCapturer, ipcRenderer } from 'electron'\n\n// 获取视频流\nasync function getScreenStream() {\n    const sources = await desktopCapturer.getSources({ types: ['screen'] })\n    return new Promise((resolve, reject) => {\n        navigator.webkitGetUserMedia({\n            audio: false,\n            video: {\n                mandatory: {\n                    chromeMediaSource: 'desktop',\n                    chromeMediaSourceId: sources[0].id,\n                    maxWidth: window.screen.width,\n                    maxHeight: window.screen.height\n                }\n            }\n        }, stream => {\n            resolve(stream)\n            // peer.emit('add-stream', stream)\n        }, err => {\n            console.error(err)\n        })\n    })\n}\n// getScreenStream()\n\n// 响应控制端，创建answer   - 创建视频流\nconst pc = new window.RTCPeerConnection({})\npc.ondatachannel = e => {\n    console.log('datachannel', e)\n    e.channel.onmessage = e => {\n        let { type, data } = JSON.parse(e.data)\n        if(type === 'mouse') {\n            data.screen = {\n                width: window.screen.width,\n                height: window.screen.height,\n            }\n        }\n        ipcRenderer.send('robot', type, data)\n    }\n}\n\npc.onicecandidate = function(e) {\n    console.log('candidate', JSON.stringify(e.candidate))\n    if(e.candidate) {\n        ipcRenderer.send('forward', 'puppet-candidate', e.candidate)\n    }\n}\nipcRenderer.on('candidate', (e, candidate) => {\n    addIceCandidate(candidate)\n})\nlet candidates = []\nasync function addIceCandidate(candidate) {\n    if(candidate) {\n        candidates.push(candidate)\n    }\n    if(pc.remoteDescription && pc.remoteDescription.type) {\n        for(let i = 0; i < candidates.length; i++) {\n            await pc.addIceCandidate(new RTCIceCandidate(candidates[i]))\n        }\n        candidates = []\n    }\n}\n\n// window.addIceCandidate = addIceCandidate\nipcRenderer.on('offer', async (e, offer) => {\n    let answer = await createAnswer(offer)\n    ipcRenderer.send('forward', 'answer', {\n        type: answer.type,\n        sdp: answer.sdp,\n    })\n})\n\nasync function createAnswer(offer) {\n    let screenStream = await getScreenStream()\n    pc.addStream(screenStream)\n    await pc.setRemoteDescription(offer)\n    await pc.setLocalDescription(await pc.createAnswer())\n    console.log('answer', JSON.stringify(pc.localDescription))\n    return pc.localDescription\n}\n\n// window.createAnswer = createAnswer","import React, { useState, useEffect, useReducer } from 'react';\nimport { ipcRenderer, remote } from 'electron'\n// import logo from './logo.svg';\nimport './peer-puppet.js'\nimport './App.css';\nconst { Menu, MenuItem } = remote\n\n// 主进程页面\nfunction App() {\n  // 这一段类似于在constructor内定义this.state\n  const [remoteCode, setRemoteCode] = useState('')\n  const [lcoalCode, setLocalCode] = useState('')\n  const [controlText, setControlText] = useState('')\n\n  // 这部分相当于生命周期钩子集合\n  useEffect(() => {\n    // 这一段相当于组件挂载之后componentDidMount\n    login()\n    ipcRenderer.on('control-state-change', handleControlState)\n    // 这一段相当于销毁组件生命周期componentWillUnMount\n    return () => {\n      // 清理掉监听主进程发送的监听事件\n      ipcRenderer.removeListener('control-state-change', handleControlState)\n    }\n  }, [])\n\n  // 这部分是自定义函数\n  const login = async () => {\n    let code = await ipcRenderer.invoke('login')\n    setLocalCode(code)\n  }\n  const startControl = (remoteCode) => {\n    ipcRenderer.send('control', remoteCode)\n  }\n\n  // type 0 - 未连接  1 - 已控制  2 - 被控制\n  const handleControlState = (e, name, type) => {\n    let text =  ''\n    if (type === 1) {\n      // 控制别人\n      text = `正在远程控制${name}`\n    } else if (type === 2) {\n      // 被控制\n      text = `被${name}控制`\n    }\n    setControlText(text)\n  }\n\n  // 增加右键菜单\n  const handleContextMenu = e => {\n    e.preventDefault()\n    const menu = new Menu()\n    menu.append(new MenuItem({\n      label: '复制',\n      role: 'copy'\n    }))\n    menu.popup()\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        controlText === '' ?\n          <div>\n            <div>你的控制码 <span onContextMenu={(e) => handleContextMenu(e)}>{lcoalCode}</span> </div>\n            <input type=\"text\" value={remoteCode} onChange={e => setRemoteCode(e.target.value)} />\n            <button onClick={() => startControl(remoteCode)}>确认</button>\n          </div>\n          :\n          <div>{controlText}</div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}